<Type Name="DevBoxesClient" FullName="Azure.Developer.DevCenter.DevBoxesClient">
  <TypeSignature Language="C#" Value="public class DevBoxesClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DevBoxesClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Developer.DevCenter.DevBoxesClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DevBoxesClient" />
  <TypeSignature Language="F#" Value="type DevBoxesClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The DevBoxes service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DevBoxesClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of DevBoxesClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevBoxesClient (Uri endpoint, string projectName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string projectName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, projectName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevBoxesClient : Uri * string * Azure.Core.TokenCredential -&gt; Azure.Developer.DevCenter.DevBoxesClient" Usage="new Azure.Developer.DevCenter.DevBoxesClient (endpoint, projectName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of DevBoxesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="projectName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevBoxesClient (Uri endpoint, string projectName, Azure.Core.TokenCredential credential, Azure.Developer.DevCenter.DevCenterClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string projectName, class Azure.Core.TokenCredential credential, class Azure.Developer.DevCenter.DevCenterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.Developer.DevCenter.DevCenterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, projectName As String, credential As TokenCredential, options As DevCenterClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevBoxesClient : Uri * string * Azure.Core.TokenCredential * Azure.Developer.DevCenter.DevCenterClientOptions -&gt; Azure.Developer.DevCenter.DevBoxesClient" Usage="new Azure.Developer.DevCenter.DevBoxesClient (endpoint, projectName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Developer.DevCenter.DevCenterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DevBoxesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="projectName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDevBox (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDevBox(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBox(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBox (waitUntil As WaitUntil, userId As String, devBoxName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBox : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDevBox : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="devBoxesClient.CreateDevBox (waitUntil, userId, devBoxName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or updates a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateDevBox and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
});
Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "me", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBox with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
    localAdministrator = "Enabled",
});
Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "me", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDevBoxAsync (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBoxAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBoxAsync (waitUntil As WaitUntil, userId As String, devBoxName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBoxAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDevBoxAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="devBoxesClient.CreateDevBoxAsync (waitUntil, userId, devBoxName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or updates a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateDevBoxAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
});
Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBoxAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
    localAdministrator = "Enabled",
});
Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayUpcomingAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DelayUpcomingAction (string userId, string devBoxName, string upcomingActionId, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DelayUpcomingAction(string userId, string devBoxName, string upcomingActionId, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayUpcomingAction(System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayUpcomingAction (userId As String, devBoxName As String, upcomingActionId As String, delayUntil As DateTimeOffset, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member DelayUpcomingAction : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DelayUpcomingAction : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.DelayUpcomingAction (userId, devBoxName, upcomingActionId, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="delayUntil"> The delayed action time (UTC). </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayUpcomingAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.DelayUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DelayUpcomingAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.DelayUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayUpcomingActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DelayUpcomingActionAsync (string userId, string devBoxName, string upcomingActionId, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DelayUpcomingActionAsync(string userId, string devBoxName, string upcomingActionId, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayUpcomingActionAsync(System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayUpcomingActionAsync (userId As String, devBoxName As String, upcomingActionId As String, delayUntil As DateTimeOffset, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DelayUpcomingActionAsync : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DelayUpcomingActionAsync : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.DelayUpcomingActionAsync (userId, devBoxName, upcomingActionId, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="delayUntil"> The delayed action time (UTC). </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayUpcomingActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.DelayUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DelayUpcomingActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.DelayUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation DeleteDevBox (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation DeleteDevBox(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DeleteDevBox(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDevBox (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member DeleteDevBox : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.DeleteDevBox : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.DeleteDevBox (waitUntil, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.DeleteDevBox(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call DeleteDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.DeleteDevBox(WaitUntil.Completed, "me", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeleteDevBoxAsync (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeleteDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DeleteDevBoxAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDevBoxAsync (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDevBoxAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeleteDevBoxAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.DeleteDevBoxAsync (waitUntil, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call DeleteDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDevBoxByUser (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDevBoxByUser(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUser(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxByUser (userId As String, devBoxName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxByUser : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDevBoxByUser : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetDevBoxByUser (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxByUser and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetDevBoxByUser("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUser with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetDevBoxByUser("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxByUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDevBoxByUserAsync (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDevBoxByUserAsync(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxByUserAsync (userId As String, devBoxName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxByUserAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDevBoxByUserAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetDevBoxByUserAsync (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxByUserAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetDevBoxByUserAsync("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUserAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetDevBoxByUserAsync("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxesByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDevBoxesByUser (string userId, string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDevBoxesByUser(string userId, string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxesByUser(System.String,System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxesByUser (userId As String, filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxesByUser : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxesByUser : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxesByUser (userId, filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the project for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxesByUser and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetDevBoxesByUser("me", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUser with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetDevBoxesByUser("me", "<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("poolName").ToString());
    Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
    Console.WriteLine(result[0].GetProperty("actionState").ToString());
    Console.WriteLine(result[0].GetProperty("powerState").ToString());
    Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
    Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result[0].GetProperty("location").ToString());
    Console.WriteLine(result[0].GetProperty("osType").ToString());
    Console.WriteLine(result[0].GetProperty("user").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result[0].GetProperty("createdTime").ToString());
    Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxesByUserAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDevBoxesByUserAsync (string userId, string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDevBoxesByUserAsync(string userId, string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxesByUserAsync(System.String,System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxesByUserAsync (userId As String, filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxesByUserAsync : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxesByUserAsync : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxesByUserAsync (userId, filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the project for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxesByUserAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetDevBoxesByUserAsync("me", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUserAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetDevBoxesByUserAsync("me", "<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("poolName").ToString());
    Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
    Console.WriteLine(result[0].GetProperty("actionState").ToString());
    Console.WriteLine(result[0].GetProperty("powerState").ToString());
    Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
    Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result[0].GetProperty("location").ToString());
    Console.WriteLine(result[0].GetProperty("osType").ToString());
    Console.WriteLine(result[0].GetProperty("user").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result[0].GetProperty("createdTime").ToString());
    Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetPool (string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetPool(string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPool(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPool (poolName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetPool : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetPool : string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetPool (poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a pool
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: "Windows", # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetPool("<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetPool("<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetPoolAsync (string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetPoolAsync(string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolAsync (poolName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetPoolAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetPoolAsync (poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a pool
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: "Windows", # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetPoolAsync("<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetPoolAsync("<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetPools (int? maxCount, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetPools(valuetype System.Nullable`1&lt;int32&gt; maxCount, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPools(System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPools (maxCount As Nullable(Of Integer), filter As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPools : Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetPools : Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetPools (maxCount, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available pools
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: "Windows", # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPools and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetPools(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetPools with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetPools(1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("location").ToString());
    Console.WriteLine(result[0].GetProperty("osType").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetPoolsAsync (int? maxCount, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetPoolsAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolsAsync(System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolsAsync (maxCount As Nullable(Of Integer), filter As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolsAsync : Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetPoolsAsync : Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetPoolsAsync (maxCount, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available pools
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: "Windows", # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetPoolsAsync(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetPoolsAsync(1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("location").ToString());
    Console.WriteLine(result[0].GetProperty("osType").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRemoteConnection (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRemoteConnection(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnection(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnection (userId As String, devBoxName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnection : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRemoteConnection : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetRemoteConnection (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets RDP Connection info
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRemoteConnection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetRemoteConnection("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnection with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetRemoteConnection("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRemoteConnectionAsync (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRemoteConnectionAsync(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnectionAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnectionAsync (userId As String, devBoxName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnectionAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRemoteConnectionAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetRemoteConnectionAsync (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets RDP Connection info
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRemoteConnectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetRemoteConnectionAsync("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetRemoteConnectionAsync("me", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetScheduleByPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetScheduleByPool (string poolName, string scheduleName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetScheduleByPool(string poolName, string scheduleName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetScheduleByPool(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduleByPool (poolName As String, scheduleName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetScheduleByPool : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetScheduleByPool : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetScheduleByPool (poolName, scheduleName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="scheduleName"> The name of a schedule. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: "StopDevBox", # Optional. Supported type this scheduled task represents.
  frequency: "Daily", # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetScheduleByPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetScheduleByPool with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetScheduleByPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetScheduleByPoolAsync (string poolName, string scheduleName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetScheduleByPoolAsync(string poolName, string scheduleName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetScheduleByPoolAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduleByPoolAsync (poolName As String, scheduleName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetScheduleByPoolAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetScheduleByPoolAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetScheduleByPoolAsync (poolName, scheduleName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="scheduleName"> The name of a schedule. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: "StopDevBox", # Optional. Supported type this scheduled task represents.
  frequency: "Daily", # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetScheduleByPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetScheduleByPoolAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedulesByPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSchedulesByPool (string poolName, int? maxCount, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSchedulesByPool(string poolName, valuetype System.Nullable`1&lt;int32&gt; maxCount, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedulesByPool(System.String,System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedulesByPool (poolName As String, maxCount As Nullable(Of Integer), filter As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedulesByPool : string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSchedulesByPool : string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetSchedulesByPool (poolName, maxCount, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available schedules for a pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: "StopDevBox", # Optional. Supported type this scheduled task represents.
  frequency: "Daily", # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSchedulesByPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetSchedulesByPool("<poolName>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPool with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetSchedulesByPool("<poolName>", 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("type").ToString());
    Console.WriteLine(result[0].GetProperty("frequency").ToString());
    Console.WriteLine(result[0].GetProperty("time").ToString());
    Console.WriteLine(result[0].GetProperty("timeZone").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedulesByPoolAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSchedulesByPoolAsync (string poolName, int? maxCount, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSchedulesByPoolAsync(string poolName, valuetype System.Nullable`1&lt;int32&gt; maxCount, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedulesByPoolAsync(System.String,System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedulesByPoolAsync (poolName As String, maxCount As Nullable(Of Integer), filter As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedulesByPoolAsync : string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSchedulesByPoolAsync : string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetSchedulesByPoolAsync (poolName, maxCount, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolName"> The name of a pool of Dev Boxes. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available schedules for a pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: "StopDevBox", # Optional. Supported type this scheduled task represents.
  frequency: "Daily", # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSchedulesByPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<poolName>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPoolAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
    Console.WriteLine(result[0].GetProperty("type").ToString());
    Console.WriteLine(result[0].GetProperty("frequency").ToString());
    Console.WriteLine(result[0].GetProperty("time").ToString());
    Console.WriteLine(result[0].GetProperty("timeZone").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUpcomingAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpcomingAction (string userId, string devBoxName, string upcomingActionId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpcomingAction(string userId, string devBoxName, string upcomingActionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetUpcomingAction(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpcomingAction (userId As String, devBoxName As String, upcomingActionId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpcomingAction : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpcomingAction : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetUpcomingAction (userId, devBoxName, upcomingActionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpcomingAction</c>:
<code>{
  id: string, # Optional. Uniquely identifies the action.
  actionType: "Stop", # Optional. The action that will be taken.
  reason: "Schedule", # Optional. The reason for this action.
  scheduledTime: string (ISO 8601 Format), # Optional. The target time the action will be triggered (UTC).
  originalScheduledTime: string (ISO 8601 Format), # Optional. The original scheduled time for the action (UTC).
  sourceId: string, # Optional. The id of the resource which triggered this action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetUpcomingAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUpcomingAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.GetUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUpcomingActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpcomingActionAsync (string userId, string devBoxName, string upcomingActionId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpcomingActionAsync(string userId, string devBoxName, string upcomingActionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetUpcomingActionAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpcomingActionAsync (userId As String, devBoxName As String, upcomingActionId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpcomingActionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpcomingActionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetUpcomingActionAsync (userId, devBoxName, upcomingActionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpcomingAction</c>:
<code>{
  id: string, # Optional. Uniquely identifies the action.
  actionType: "Stop", # Optional. The action that will be taken.
  reason: "Schedule", # Optional. The reason for this action.
  scheduledTime: string (ISO 8601 Format), # Optional. The target time the action will be triggered (UTC).
  originalScheduledTime: string (ISO 8601 Format), # Optional. The original scheduled time for the action (UTC).
  sourceId: string, # Optional. The id of the resource which triggered this action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetUpcomingActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUpcomingActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.GetUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUpcomingActions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetUpcomingActions (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetUpcomingActions(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetUpcomingActions(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpcomingActions (userId As String, devBoxName As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetUpcomingActions : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetUpcomingActions : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetUpcomingActions (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists upcoming actions on a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpcomingActionsListResultValue</c>:
<code>{
  id: string, # Optional. Uniquely identifies the action.
  actionType: "Stop", # Optional. The action that will be taken.
  reason: "Schedule", # Optional. The reason for this action.
  scheduledTime: string (ISO 8601 Format), # Optional. The target time the action will be triggered (UTC).
  originalScheduledTime: string (ISO 8601 Format), # Optional. The original scheduled time for the action (UTC).
  sourceId: string, # Optional. The id of the resource which triggered this action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetUpcomingActions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetUpcomingActions("me", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetUpcomingActions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

foreach (BinaryData item in client.GetUpcomingActions("me", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("id").ToString());
    Console.WriteLine(result[0].GetProperty("actionType").ToString());
    Console.WriteLine(result[0].GetProperty("reason").ToString());
    Console.WriteLine(result[0].GetProperty("scheduledTime").ToString());
    Console.WriteLine(result[0].GetProperty("originalScheduledTime").ToString());
    Console.WriteLine(result[0].GetProperty("sourceId").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUpcomingActionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetUpcomingActionsAsync (string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetUpcomingActionsAsync(string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetUpcomingActionsAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpcomingActionsAsync (userId As String, devBoxName As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetUpcomingActionsAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetUpcomingActionsAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetUpcomingActionsAsync (userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists upcoming actions on a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpcomingActionsListResultValue</c>:
<code>{
  id: string, # Optional. Uniquely identifies the action.
  actionType: "Stop", # Optional. The action that will be taken.
  reason: "Schedule", # Optional. The reason for this action.
  scheduledTime: string (ISO 8601 Format), # Optional. The target time the action will be triggered (UTC).
  originalScheduledTime: string (ISO 8601 Format), # Optional. The original scheduled time for the action (UTC).
  sourceId: string, # Optional. The id of the resource which triggered this action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetUpcomingActionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetUpcomingActionsAsync("me", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].ToString());
}
]]></code>
This sample shows how to call GetUpcomingActionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

await foreach (BinaryData item in client.GetUpcomingActionsAsync("me", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("id").ToString());
    Console.WriteLine(result[0].GetProperty("actionType").ToString());
    Console.WriteLine(result[0].GetProperty("reason").ToString());
    Console.WriteLine(result[0].GetProperty("scheduledTime").ToString());
    Console.WriteLine(result[0].GetProperty("originalScheduledTime").ToString());
    Console.WriteLine(result[0].GetProperty("sourceId").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Developer.DevCenter.DevBoxesClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Developer.DevCenter.DevBoxesClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipUpcomingAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SkipUpcomingAction (string userId, string devBoxName, string upcomingActionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SkipUpcomingAction(string userId, string devBoxName, string upcomingActionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.SkipUpcomingAction(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SkipUpcomingAction (userId As String, devBoxName As String, upcomingActionId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SkipUpcomingAction : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SkipUpcomingAction : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.SkipUpcomingAction (userId, devBoxName, upcomingActionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Skips an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SkipUpcomingAction.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.SkipUpcomingAction("me", "<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipUpcomingAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = client.SkipUpcomingAction("me", "<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SkipUpcomingActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SkipUpcomingActionAsync (string userId, string devBoxName, string upcomingActionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SkipUpcomingActionAsync(string userId, string devBoxName, string upcomingActionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.SkipUpcomingActionAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SkipUpcomingActionAsync (userId As String, devBoxName As String, upcomingActionId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SkipUpcomingActionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SkipUpcomingActionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.SkipUpcomingActionAsync (userId, devBoxName, upcomingActionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="upcomingActionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="upcomingActionId"> The upcoming action id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Skips an Upcoming Action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="upcomingActionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SkipUpcomingActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.SkipUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipUpcomingActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Response response = await client.SkipUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation StartDevBox (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation StartDevBox(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StartDevBox(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDevBox (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member StartDevBox : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.StartDevBox : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.StartDevBox (waitUntil, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.StartDevBox(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call StartDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.StartDevBox(WaitUntil.Completed, "me", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; StartDevBoxAsync (Azure.WaitUntil waitUntil, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; StartDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StartDevBoxAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDevBoxAsync (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member StartDevBoxAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.StartDevBoxAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.StartDevBoxAsync (waitUntil, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call StartDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation StopDevBox (Azure.WaitUntil waitUntil, string userId, string devBoxName, bool? hibernate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation StopDevBox(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, valuetype System.Nullable`1&lt;bool&gt; hibernate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StopDevBox(Azure.WaitUntil,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopDevBox (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional hibernate As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member StopDevBox : Azure.WaitUntil * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.StopDevBox : Azure.WaitUntil * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.StopDevBox (waitUntil, userId, devBoxName, hibernate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="hibernate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.StopDevBox(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call StopDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = client.StopDevBox(WaitUntil.Completed, "me", "<devBoxName>", hibernate: true);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; StopDevBoxAsync (Azure.WaitUntil waitUntil, string userId, string devBoxName, bool? hibernate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; StopDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string userId, string devBoxName, valuetype System.Nullable`1&lt;bool&gt; hibernate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StopDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopDevBoxAsync (waitUntil As WaitUntil, userId As String, devBoxName As String, Optional hibernate As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member StopDevBoxAsync : Azure.WaitUntil * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.StopDevBoxAsync : Azure.WaitUntil * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.StopDevBoxAsync (waitUntil, userId, devBoxName, hibernate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="hibernate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
]]></code>
This sample shows how to call StopDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", hibernate: true);
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
